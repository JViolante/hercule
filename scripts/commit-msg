#!/usr/bin/env node
require("shelljs/make");

var semver = require("semver");
'use strict';

var TAG_REGEX = /^(?:Fix|Update|Breaking|Docs|Build|New|Upgrade|chore\(upgrade\)):/;
var ISSUE_REGEX = /\((?:fixes|refs) #\d+(?:.*(?:fixes|refs) #\d+)*\)$/;

/**
 * Executes a command and returns the output instead of printing it to stdout.
 * @param {string} cmd The command string to execute.
 * @returns {string} The result of the executed command.
 */
function execSilent(cmd) {
    return exec(cmd, { silent: true }).output;
}

/**
 * Splits a command result to separate lines.
 * @param {string} result The command result string.
 * @returns {array} The separated lines.
 */
function splitCommandResultToLines(result) {
    return result.trim().split("\n");
}

/**
 * Check if the branch name is valid
 * @param {string} branchName Branch name to check
 * @returns {boolean} true is branch exists
 * @private
 */
function hasBranch(branchName) {
    var branches = getBranches();
    return branches.indexOf(branchName) !== -1;
}

/**
 * Returns all the branch names
 * @returns {string[]} branch names
 * @private
 */
function getBranches() {
    var branchesRaw = splitCommandResultToLines(execSilent("git branch --list")),
        branches = [],
        branchName;

    for (var i = 0; i < branchesRaw.length; i++) {
        branchName = branchesRaw[i].replace(/^\*(.*)/, "$1").trim();
        branches.push(branchName);
    }
    return branches;
}

function checkGitCommit() {
  var commitMsgs, failed;

  if (hasBranch("master")) {
    commitMsgs = splitCommandResultToLines(execSilent("git log HEAD --not master --format=format:%s --no-merges"));
  } else {
    commitMsgs = [execSilent("git log -1 --format=format:%s --no-merges")];
  }

  echo("Validating Commit Message");

  // No commit since master should not cause test to fail
  if (commitMsgs[0] === "") {
    return;
  }

  // Check for more than one commit
  if (commitMsgs.length > 1) {
    echo(" - More than one commit found, please squash.");
    failed = true;
  }

  // Only check non-release messages
  if (!semver.valid(commitMsgs[0]) && !/^Revert /.test(commitMsgs[0])) {
    if (commitMsgs[0].slice(0, commitMsgs[0].indexOf("\n")).length > 72) {
      echo(" - First line of commit message must not exceed 72 characters");
      failed = true;
    }

    // Check for tag at start of message
    if (!TAG_REGEX.test(commitMsgs[0])) {
      echo([" - Commit summary must start with one of:",
        "    'Fix:'",
        "    'Update:'",
        "    'Breaking:'",
        "    'Docs:'",
        "    'Build:'",
        "    'New:'",
        "    'Upgrade:'",
        "   Please refer to the contribution guidelines for more details."].join("\n"));
      failed = true;
    }

    // Check for an issue reference at end (unless it's a documentation or upgrade commit)
    if (!/^(Docs|Upgrade|chore\(upgrade\)):/.test(commitMsgs[0])) {
      if (!ISSUE_REGEX.test(commitMsgs[0])) {
        echo([" - Commit summary must end with with one of:",
          "    '(fixes #1234)'",
          "    '(refs #1234)'",
          "   Where '1234' is the issue being addressed.",
          "   Please refer to the contribution guidelines for more details."].join("\n"));
        failed = true;
      }
    }
  }

  if (failed) {
    exit(1);
  }
}

checkGitCommit();
