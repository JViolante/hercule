// Generated by CoffeeScript 1.7.1
(function() {
  var assert, md;

  assert = require('assert');

  md = require('../lib/transclude');

  describe('markdown transclude', function() {
    describe('detectDependencies', function() {
      it('should whitespace on the first line of a file', function() {
        var document;
        document = "\t{{test}}";
        return md.detectDependencies(document, null, function(err, placeholders, dependencies) {
          return assert.equal(dependencies.test.whitespace, "\t");
        });
      });
      return it('should detect different types of whitespace', function() {
        var document, scenario, whitespace, whitespaceScenarios;
        document = "# Heading 1\n";
        whitespaceScenarios = {
          tab: "\t",
          two: " ",
          mixed: "  \t "
        };
        for (scenario in whitespaceScenarios) {
          whitespace = whitespaceScenarios[scenario];
          document += "" + whitespace + "{{" + scenario + "}}\n";
        }
        return md.detectDependencies(document, null, function(err, placeholders, dependencies) {
          var _results;
          _results = [];
          for (scenario in whitespaceScenarios) {
            whitespace = whitespaceScenarios[scenario];
            _results.push(assert.equal(dependencies[scenario].whitespace, "" + whitespace));
          }
          return _results;
        });
      });
    });
    describe('substituteParameters', function() {
      return it('should substitute placeholders with filenames', function() {
        var document, parameters;
        document = "# Heading 1\n{{fruit}}\n{{footer}}";
        parameters = {
          fruit: "apple.md",
          footer: "common/footer.md"
        };
        return md.substituteParameters(document, parameters, null, function(err, substitutedDocument) {
          return assert.equal(substitutedDocument, "# Heading 1\n{{apple.md}}\n{{common/footer.md}}");
        });
      });
    });
    return describe('parseParameters', function() {
      it('should parse parameters', function() {
        var expectedParams, parameterScenario;
        parameterScenario = ["placeholder:filename.md"];
        expectedParams = {
          placeholder: "filename.md"
        };
        return md.parseParameters(parameterScenario, null, function(err, parsedParameters) {
          return assert.deepEqual(parsedParameters, expectedParams);
        });
      });
      return it('should parse multiple parameters', function() {
        var expectedParams, parameterScenario;
        parameterScenario = ["placeholder:filename.md", "legal:legal/common.md"];
        expectedParams = {
          placeholder: "filename.md",
          legal: "legal/common.md"
        };
        return md.parseParameters(parameterScenario, null, function(err, parsedParameters) {
          return assert.deepEqual(parsedParameters, expectedParams);
        });
      });
    });
  });

}).call(this);
